// Code generated by ent, DO NOT EDIT.

package users

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the users type in the database.
	Label = "users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldGlobalName holds the string denoting the global_name field in the database.
	FieldGlobalName = "global_name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldExpiresIn holds the string denoting the expires_in field in the database.
	FieldExpiresIn = "expires_in"
	// FieldSessionState holds the string denoting the session_state field in the database.
	FieldSessionState = "session_state"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsersLinks holds the string denoting the users_links edge name in mutations.
	EdgeUsersLinks = "users_links"
	// EdgeUsersSessions holds the string denoting the users_sessions edge name in mutations.
	EdgeUsersSessions = "users_sessions"
	// EdgeUsersAccounts holds the string denoting the users_accounts edge name in mutations.
	EdgeUsersAccounts = "users_accounts"
	// Table holds the table name of the users in the database.
	Table = "users"
	// UsersLinksTable is the table that holds the users_links relation/edge.
	UsersLinksTable = "links"
	// UsersLinksInverseTable is the table name for the Links entity.
	// It exists in this package in order to avoid circular dependency with the "links" package.
	UsersLinksInverseTable = "links"
	// UsersLinksColumn is the table column denoting the users_links relation/edge.
	UsersLinksColumn = "user_id"
	// UsersSessionsTable is the table that holds the users_sessions relation/edge.
	UsersSessionsTable = "sessions"
	// UsersSessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	UsersSessionsInverseTable = "sessions"
	// UsersSessionsColumn is the table column denoting the users_sessions relation/edge.
	UsersSessionsColumn = "user_id"
	// UsersAccountsTable is the table that holds the users_accounts relation/edge.
	UsersAccountsTable = "accounts"
	// UsersAccountsInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	UsersAccountsInverseTable = "accounts"
	// UsersAccountsColumn is the table column denoting the users_accounts relation/edge.
	UsersAccountsColumn = "external_id"
)

// Columns holds all SQL columns for users fields.
var Columns = []string{
	FieldID,
	FieldExternalID,
	FieldUsername,
	FieldGlobalName,
	FieldSlug,
	FieldAvatar,
	FieldDescription,
	FieldAccessToken,
	FieldRefreshToken,
	FieldScope,
	FieldExpiresIn,
	FieldSessionState,
	FieldDeleted,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// GlobalNameValidator is a validator for the "global_name" field. It is called by the builders before save.
	GlobalNameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	AccessTokenValidator func(string) error
	// RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	RefreshTokenValidator func(string) error
	// ScopeValidator is a validator for the "scope" field. It is called by the builders before save.
	ScopeValidator func(string) error
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Users queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByGlobalName orders the results by the global_name field.
func ByGlobalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGlobalName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByExpiresIn orders the results by the expires_in field.
func ByExpiresIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresIn, opts...).ToFunc()
}

// BySessionState orders the results by the session_state field.
func BySessionState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionState, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsersLinksCount orders the results by users_links count.
func ByUsersLinksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersLinksStep(), opts...)
	}
}

// ByUsersLinks orders the results by users_links terms.
func ByUsersLinks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersLinksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersSessionsCount orders the results by users_sessions count.
func ByUsersSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersSessionsStep(), opts...)
	}
}

// ByUsersSessions orders the results by users_sessions terms.
func ByUsersSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersAccountsCount orders the results by users_accounts count.
func ByUsersAccountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersAccountsStep(), opts...)
	}
}

// ByUsersAccounts orders the results by users_accounts terms.
func ByUsersAccounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersAccountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersLinksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersLinksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersLinksTable, UsersLinksColumn),
	)
}
func newUsersSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersSessionsTable, UsersSessionsColumn),
	)
}
func newUsersAccountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersAccountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersAccountsTable, UsersAccountsColumn),
	)
}
