// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zmzlois/LinkGoGo/ent/links"
	"github.com/zmzlois/LinkGoGo/ent/predicate"
	"github.com/zmzlois/LinkGoGo/ent/users"
)

// LinksUpdate is the builder for updating Links entities.
type LinksUpdate struct {
	config
	hooks    []Hook
	mutation *LinksMutation
}

// Where appends a list predicates to the LinksUpdate builder.
func (lu *LinksUpdate) Where(ps ...predicate.Links) *LinksUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LinksUpdate) SetUserID(u uuid.UUID) *LinksUpdate {
	lu.mutation.SetUserID(u)
	return lu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lu *LinksUpdate) SetNillableUserID(u *uuid.UUID) *LinksUpdate {
	if u != nil {
		lu.SetUserID(*u)
	}
	return lu
}

// SetURL sets the "url" field.
func (lu *LinksUpdate) SetURL(s string) *LinksUpdate {
	lu.mutation.SetURL(s)
	return lu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (lu *LinksUpdate) SetNillableURL(s *string) *LinksUpdate {
	if s != nil {
		lu.SetURL(*s)
	}
	return lu
}

// SetTitle sets the "title" field.
func (lu *LinksUpdate) SetTitle(s string) *LinksUpdate {
	lu.mutation.SetTitle(s)
	return lu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (lu *LinksUpdate) SetNillableTitle(s *string) *LinksUpdate {
	if s != nil {
		lu.SetTitle(*s)
	}
	return lu
}

// SetImage sets the "image" field.
func (lu *LinksUpdate) SetImage(s string) *LinksUpdate {
	lu.mutation.SetImage(s)
	return lu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (lu *LinksUpdate) SetNillableImage(s *string) *LinksUpdate {
	if s != nil {
		lu.SetImage(*s)
	}
	return lu
}

// SetDeleted sets the "deleted" field.
func (lu *LinksUpdate) SetDeleted(b bool) *LinksUpdate {
	lu.mutation.SetDeleted(b)
	return lu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (lu *LinksUpdate) SetNillableDeleted(b *bool) *LinksUpdate {
	if b != nil {
		lu.SetDeleted(*b)
	}
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LinksUpdate) SetCreatedAt(t time.Time) *LinksUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LinksUpdate) SetNillableCreatedAt(t *time.Time) *LinksUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LinksUpdate) SetUpdatedAt(t time.Time) *LinksUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetUser sets the "user" edge to the Users entity.
func (lu *LinksUpdate) SetUser(u *Users) *LinksUpdate {
	return lu.SetUserID(u.ID)
}

// Mutation returns the LinksMutation object of the builder.
func (lu *LinksUpdate) Mutation() *LinksMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (lu *LinksUpdate) ClearUser() *LinksUpdate {
	lu.mutation.ClearUser()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LinksUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LinksUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LinksUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LinksUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LinksUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := links.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LinksUpdate) check() error {
	if v, ok := lu.mutation.URL(); ok {
		if err := links.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Links.url": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Title(); ok {
		if err := links.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Links.title": %w`, err)}
		}
	}
	if v, ok := lu.mutation.Image(); ok {
		if err := links.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Links.image": %w`, err)}
		}
	}
	if _, ok := lu.mutation.UserID(); lu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Links.user"`)
	}
	return nil
}

func (lu *LinksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(links.Table, links.Columns, sqlgraph.NewFieldSpec(links.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.URL(); ok {
		_spec.SetField(links.FieldURL, field.TypeString, value)
	}
	if value, ok := lu.mutation.Title(); ok {
		_spec.SetField(links.FieldTitle, field.TypeString, value)
	}
	if value, ok := lu.mutation.Image(); ok {
		_spec.SetField(links.FieldImage, field.TypeString, value)
	}
	if value, ok := lu.mutation.Deleted(); ok {
		_spec.SetField(links.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(links.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(links.FieldUpdatedAt, field.TypeTime, value)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   links.UserTable,
			Columns: []string{links.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   links.UserTable,
			Columns: []string{links.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{links.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LinksUpdateOne is the builder for updating a single Links entity.
type LinksUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LinksMutation
}

// SetUserID sets the "user_id" field.
func (luo *LinksUpdateOne) SetUserID(u uuid.UUID) *LinksUpdateOne {
	luo.mutation.SetUserID(u)
	return luo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (luo *LinksUpdateOne) SetNillableUserID(u *uuid.UUID) *LinksUpdateOne {
	if u != nil {
		luo.SetUserID(*u)
	}
	return luo
}

// SetURL sets the "url" field.
func (luo *LinksUpdateOne) SetURL(s string) *LinksUpdateOne {
	luo.mutation.SetURL(s)
	return luo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (luo *LinksUpdateOne) SetNillableURL(s *string) *LinksUpdateOne {
	if s != nil {
		luo.SetURL(*s)
	}
	return luo
}

// SetTitle sets the "title" field.
func (luo *LinksUpdateOne) SetTitle(s string) *LinksUpdateOne {
	luo.mutation.SetTitle(s)
	return luo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (luo *LinksUpdateOne) SetNillableTitle(s *string) *LinksUpdateOne {
	if s != nil {
		luo.SetTitle(*s)
	}
	return luo
}

// SetImage sets the "image" field.
func (luo *LinksUpdateOne) SetImage(s string) *LinksUpdateOne {
	luo.mutation.SetImage(s)
	return luo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (luo *LinksUpdateOne) SetNillableImage(s *string) *LinksUpdateOne {
	if s != nil {
		luo.SetImage(*s)
	}
	return luo
}

// SetDeleted sets the "deleted" field.
func (luo *LinksUpdateOne) SetDeleted(b bool) *LinksUpdateOne {
	luo.mutation.SetDeleted(b)
	return luo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (luo *LinksUpdateOne) SetNillableDeleted(b *bool) *LinksUpdateOne {
	if b != nil {
		luo.SetDeleted(*b)
	}
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LinksUpdateOne) SetCreatedAt(t time.Time) *LinksUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LinksUpdateOne) SetNillableCreatedAt(t *time.Time) *LinksUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LinksUpdateOne) SetUpdatedAt(t time.Time) *LinksUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetUser sets the "user" edge to the Users entity.
func (luo *LinksUpdateOne) SetUser(u *Users) *LinksUpdateOne {
	return luo.SetUserID(u.ID)
}

// Mutation returns the LinksMutation object of the builder.
func (luo *LinksUpdateOne) Mutation() *LinksMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (luo *LinksUpdateOne) ClearUser() *LinksUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// Where appends a list predicates to the LinksUpdate builder.
func (luo *LinksUpdateOne) Where(ps ...predicate.Links) *LinksUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LinksUpdateOne) Select(field string, fields ...string) *LinksUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Links entity.
func (luo *LinksUpdateOne) Save(ctx context.Context) (*Links, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LinksUpdateOne) SaveX(ctx context.Context) *Links {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LinksUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LinksUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LinksUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := links.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LinksUpdateOne) check() error {
	if v, ok := luo.mutation.URL(); ok {
		if err := links.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Links.url": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Title(); ok {
		if err := links.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Links.title": %w`, err)}
		}
	}
	if v, ok := luo.mutation.Image(); ok {
		if err := links.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Links.image": %w`, err)}
		}
	}
	if _, ok := luo.mutation.UserID(); luo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Links.user"`)
	}
	return nil
}

func (luo *LinksUpdateOne) sqlSave(ctx context.Context) (_node *Links, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(links.Table, links.Columns, sqlgraph.NewFieldSpec(links.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Links.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, links.FieldID)
		for _, f := range fields {
			if !links.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != links.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.URL(); ok {
		_spec.SetField(links.FieldURL, field.TypeString, value)
	}
	if value, ok := luo.mutation.Title(); ok {
		_spec.SetField(links.FieldTitle, field.TypeString, value)
	}
	if value, ok := luo.mutation.Image(); ok {
		_spec.SetField(links.FieldImage, field.TypeString, value)
	}
	if value, ok := luo.mutation.Deleted(); ok {
		_spec.SetField(links.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(links.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(links.FieldUpdatedAt, field.TypeTime, value)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   links.UserTable,
			Columns: []string{links.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   links.UserTable,
			Columns: []string{links.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Links{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{links.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
